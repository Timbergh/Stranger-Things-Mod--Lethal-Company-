# Lethal Company Modding Guide

Information taken from [Github](https://github.com/LethalCompany/LethalCompanyModdingWiki/wiki) made by Github user "MaxWasUnavailable"

## Initial setup

### Setting up your development environment

Before you can start modding, you'll need some tools to actually create mods. Luckily, all of these are available for free. There exist some paid options we will cover, but those are primarily aimed at existing developers who already have licenses for these tools. This guide is roughly based on some parts of the **BepInEx setup guide**, and you can also follow that one if it's clearer.

#### BepInEx setup guide

To start developing BepInEx, we need three components:

 - Latest .NET SDK
 - A code editor or an integrated development environment (IDE)
 - BepInEx installed and configured in the game
 - BepInEx plugin templates

### Installing and configuring BepInEx

Next, make sure you have BepInEx installed in your game.
If you don't have yet, follow the **installation guide**.

Run the game with BepInEx at least once in order to generate configuration files and any additional libraries.

To make debugging easier, it is useful to enable the BepInEx console. To do so, go to BepInEx/config folder and open BepInEx.cfg.
Find the following configuration section/value and edit it as follows:

`
    [Logging.Console]

    ## Enables showing a console for log output.
    # Setting type: Boolean
    # Default value: false
    Enabled = true
`

#### BepInEx installation guide

##### Where to download BepInEx

Stable builds are available on [GitHub](https://github.com/BepInEx/BepInEx/releases).
Stable builds are released once a new iteration of BepInEx is considered feature-complete.
They have the least bugs, but some newest features might not be available.
It is recommended to use stable builds in most cases.

##### Installing BepInEx

 1. Download the correct version of BepInEx. 
    - Download one of the following versions: x86 for games with 32-bit executables, x64 for games with 64-bit executables (Windows)
 2. Extract the contents into the game root.
    - After you have downloaded the correct game version, extact the contents of the archive into the game folder.
 3. Do a first run to generate configuration files
    - Simply run the game executable. This should generate BepInEx configuration file into BepInEx/config folder and an initial log file BepInEx/LogOutput.txt.
 4. Configure BepInEx to suit your needs.
    - Open BepInEx/config/BepInEx.cfg in a text editor of your choice. All options are documented directly in the configuration file.

### Installing BepInEx plugin templates

BepInEx provides helper templates to start off with plugin development.
We will be using them to make our plugins.

To install the template, run the following command:

`dotnet new -i BepInEx.Templates --nuget-source https://nuget.bepinex.dev/v3/index.json`

If the install is successful, you should see a listing of all .NET project templates. Among them should be the following BepInEx templates:

`
Templates                                     Short Name            Language    Tags
--------------------------------------------  --------------------  ----------  --------------------------------------
BepInEx 5 Plugin Template                     bepinex5plugin        [C#]        BepInEx/BepInEx 5/Plugin
BepInEx 6 .NET Launcher Plugin Template       bep6plugin_netfx      [C#]        BepInEx/BepInEx 6/Plugin/.NET Launcher
BepInEx 6 Il2Cpp Plugin Template              bep6plugin_il2cpp     [C#]        BepInEx/BepInEx 6/Plugin/Il2Cpp
BepInEx 6 Unity Mono Plugin Template          bep6plugin_unitymono  [C#]        BepInEx/BepInEx 6/Plugin/Unity Mono
`

Thats all for downloading BepInEx

### .Net SDK

An SDK (=Software Development Kit) is a system that allows you to turn your code into something that your PC can run. It is used by other tools, and you'll generally not interact with it directly.

You'll want to download and install the latest recommended version from this page (https://dotnet.microsoft.com/en-us/download). It'll look something like this

### IDE

By far the most important tool in a programmer's toolbox is an IDE (=integrated development environment). For now, the definition of an "overengineered text editor" will suffice. Through an IDE, you can edit code far more efficiently, since it offers features such as:

Syntax highlighting
Compiling
Code completion
Integrated tools (version control, linting, etc...)
Debugging
You might wonder why some of these are important, and that falls outside of the scope of this wiki, but rest assured they're essential and will save you a lot of headaches. Do not try and create mods in a simple text editor such as notepad. Technically, you can do this, but there's no reason for it beyond masochism.

For IDE's, we recommend one of the following free options:

Visual Studio -- Recommended -- An all-in-one package. Slightly more complicated, but comes with more features. Has a built-in decompiler, which can save some time.
Visual Studio Code -- A more lightweight package.
If you have access to a Jetbrains License, we recommend the following paid option:

Rider -- Recommended (The author of this article uses it himself) -- An all-in-one package. Comparable to Visual Studio. Has a built-in decompiler, which can save some time.

### BepInEx

To actually load mods into the game, we need a mod loader. This is where BepInEx comes in! Bepis Injector Extensible is a patcher/plug-in framework for Unity games. It'll handle everything related to getting the plugin to actually load into the game, so we can focus on creating the plugin without having to worry about anything else.

You'll first want to install BepInEx to your game. Follow their great installation guide to get this done. You'll want this version of BepInEx.

Once installation is complete, boot up the game once to have it generate some configuration files. Then, refresh the folder you just installed BepInEx into, and go into the BepInEx/config folder. Here, you'll find a file named BepInEx.cfg. Open it, and find and edit the following section:
`
[Logging.Console]

## Enables showing a console for log output.
# Setting type: Boolean
# Default value: false
Enabled = true
`

### Decompiler (optional)

A decompiler allows you to decompile an existing program. This is technical terminology that can roughly be translated to "it allows you to peek behind the curtain and see what the code of a program looks like". Why is this important, you may ask? Well, if we're going to mod a game, we first need to know what to mod. Do we want to reduce the price of items? We'll need to know in what part of the code items are displayed and sold to the player. Do we want to add a weather condition? We'll need to know in what parts of the code the game handles and spawns weather.

We recommend one (or both) of two free options:

[dnSpy](https://github.com/dnSpy/dnSpy)
[ILSpy](https://github.com/icsharpcode/ILSpy)
[dotPeek](https://www.jetbrains.com/decompiler/)
Note you do not necessarily need this if you have Rider or Visual Studio, since they come with built-in decompilers. Note that different decompilers offer slightly different results, and have different interfaces. This largely comes down to preference.

### Unity Explorer (optional)

[Unity Explorer](https://github.com/sinai-dev/UnityExplorer) is a tool which adds an in-game UI that allows you to explore, debug, and modify the game while it's running. This tool can be highly useful to get to know the game's technical side better, and his hence strongly recommended.

You will want to download the version compatible with the latest version of BepInEx (5).

### Additional tools (optional)

There are a number of BepInEx plugins and tools that might be useful as you get more experienced with modding. The BepInEx devs have helpfully listed them:

#### BepInEx.Debug tools
    - [Link](https://github.com/BepInEx/BepInEx.Debug)
    - Description: This is a pack of useful plugins to ease development. Below is a description of each debug plugin. You can find more specific usage guide in [repository README](https://github.com/BepInEx/BepInEx.Debug/blob/master/README.md).
 1. ScriptEngine
    - Allows to reload plugins without restarting the game. Simply put your plugins into BepInEx/scripts folder and press F6 in-game whenever you want to reload a plugin. Note that to support this your plugin needs to clean up its resources in your plugin by creating OnDestroy method and unpatching any Harmony patches along with cleaning up other resources.
 2. Startup profiler
    - Logs load times for each of the plugins.
 3. Mono Profiler
    - A profiler for Unity games. Logs all called methods, call counts and call times. Outputs all data as .csv files.
 4. Demystify Exceptions
    - Formats stack traces into a more human-friendly formats and attempts to properly resolve IEnumerables, lambdas and async state machines.

#### Runtime Unity Editor
    - Link: [GitHub](https://github.com/ManlyMarco/RuntimeUnityEditor)
    - Description: Brings an extensive Unity Editor -like hierarchy explorer directly into a game. Allows you to inspect any game object and component. Additionally comes with a C# REPL and support for rotation/translation gizmos via Vectrocity.
    - Refer to the [README](https://github.com/ManlyMarco/RuntimeUnityEditor/blob/master/README.md) for installation and usage info.

#### Configuration Manager
    - Link: [GitHub](https://github.com/ghorsington/BepInEx.ScriptLoader)
    - Description: Allows to edit all configuration files via an in-game GUI. Default hotkey is F1. Refer to [README](https://github.com/ghorsington/BepInEx.ScriptLoader/blob/master/README.md) for more info on how to use and how to integrate into your plugin.

#### C# Script Loader
    - Link: [GitHub](https://github.com/denikson/BepInEx.ScriptLoader)
    - Description: Allows to write C# scripts without compiling them. Useful for small (under 200 LOC) Harmony patches and tools. Supports live code reloading and comes with a custom version of MCS compiler that allows you to access private methods/fields without any reflection.
    - Refer to the [README](https://github.com/denikson/BepInEx.ScriptLoader/blob/master/README.md) for info on how to write scripts and current limitations.

#### ThunderKit (make plugins in Unity Editor)
    - Link: [GitHub](https://github.com/PassivePicasso/ThunderKit)
    - Description: Allows you to create plugins directly in Unity Editor. With it you can easily create new assets and link them to existing or new components. Great for integrating new items, maps and whatnot into any Unity game.
    - The tool is being actively developed and documentation is being created. Refer to [README](https://github.com/PassivePicasso/ThunderKit/blob/master/README.md) for more information about the tool and how to install it.

#### Runtime MonoMod.HookGen and MMHOOK stripping
    - Link (HookGenPatcher): [GitHub](https://github.com/harbingerofme/Bepinex.Monomod.HookGenPatcher)
    - Link (LighterPatcher): [GitHub](https://github.com/harbingerofme/LighterPatcher)
    - Description: Normally using [MonoMod.HookGen](https://github.com/MonoMod/MonoMod/blob/master/README-RuntimeDetour.md#using-hookgen) requires you to bundle MMHOOK.dll with your plugins and regenerate them between game updates.
    - This preloader patcher allows you to dynamically generate the MMHOOK.dll file on the fly when the game starts, thus removing potential problems of incompatibility between game updates. In addition, LighterPatcher strips the generated MMHOOK.dll down to only patches that are used by the plugins, thus speeding up loading of MMHOOK DLL (in cases where type resolving is triggered for all types in MMHOOK). Everything is done at runtime and requires no action from the end-user.

### Creating a GitHub account

We strongly recommend using git - a "version control system". The most popular website that offers this as a (free) service is GitHub

## Setting up your project

### Using the template repository

We have created a [template repository](https://github.com/LethalCompany/LethalCompanyTemplate) on GitHub. If you're remotely familiar with GitHub, or willing to learn, this might serve as a quick start. It does come with some minor drawbacks such as it using "LethalCompanyTemplate" as project name in a number of files, but you can edit this. It should build out-of-the-box with no edits required; though you may need to add BepInEx as a NuGet source (see the relevant section below).

### Creating your project

First things first, you'll need to create your project. If you've not done so already, we recommend running the following command in a console to add some BepInEx templates for new projects:

`dotnet new -i BepInEx.Templates --nuget-source https://nuget.bepinex.dev/v3/index.json`

Next, you'll want to create a new project (sometimes called "solution", in CSharp). There are two main ways to do this.

#### Using an IDE (more control)

Depending on your IDE, this process will look slightly different. You'll want to give the solution the name of your soon-to-be mod. If given the option to use a template (you may want to google for "how to use template in insert your IDE name here, for example "Rider" or "Visual Studio""), use the BepInEx 5 Plugin Template.

#### Using the console (simpler)

Alternatively, you can open a console and run the following command, assuming you've set up the templates using the command above. Replace MyFirstPlugin with your mod's name:

`dotnet new bepinex5plugin -n MyFirstPlugin -T "netstandard2.1" -U "2022.3.9"`

### Organising your modding projects

We recommend creating a folder somewhere easily accessible that will store all of your future modding projects. Something like "LethalCompanyMods". Move the newly created folder for your mod into this folder, to keep things well-organised.

### Adding NuGet source

BepInEx uses a separate NuGet source. You'll need to add the BepInEx NuGet source to your global source list.

The BepInEx NuGet source has the following configuration:

`
name: BepInEx
url: https://nuget.bepinex.dev/v3/index.json
`

### Making sure your mod is set up correctly

Mods are developed for specific versions of Unity and .NET, which can be specified in a configuration file. This file is a .csproj file, and has as name the name of your mod (e.g. MyFirstPlugin.csproj). If you used the console command correctly, it should work out of the box. However, you'll want to double check this to prevent any easy-to-fix problems that can result from not having it set up correctly. When using an IDE, the template might not use the correct version, so in this case you'll definitely have to check things.

Our [template project](https://github.com/LethalCompany/LethalCompanyTemplate) has an example .csproj file that is properly configured, which can be found [here](https://github.com/LethalCompany/LethalCompanyTemplate/blob/main/LethalCompanyTemplate/LethalCompanyTemplate.csproj). Please check and compare your local mod's file with this file, and make sure the following segment is the same (except for the AssemblyName, Description, and Version).

`
<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFramework>netstandard2.1</TargetFramework>
        <AssemblyName>LethalCompanyTemplate</AssemblyName>
        <Description>A template for Lethal Company</Description>
        <Version>1.0.0</Version>
        <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
        <LangVersion>latest</LangVersion>
    </PropertyGroup>

    <ItemGroup>
        <PackageReference Include="BepInEx.Analyzers" Version="1.*" PrivateAssets="all"/>
        <PackageReference Include="BepInEx.Core" Version="5.*" />
        <PackageReference Include="BepInEx.PluginInfoProps" Version="1.*"/>
        <PackageReference Include="UnityEngine.Modules" Version="2022.3.9" IncludeAssets="compile" />
    </ItemGroup>

    <ItemGroup Condition="'$(TargetFramework.TrimEnd(`0123456789`))' == 'net'">
        <PackageReference Include="Microsoft.NETFramework.ReferenceAssemblies" Version="1.0.2" PrivateAssets="all"/>
    </ItemGroup>
</Project>
`

### "Building" your mod

Your IDE is capable of turning your code into a file that can be run (in this case by BepInEx as a mod). This process is called "building" or "compiling". In this case, it will turn your code into a .dll file. This file is your mod.

Once built, you should be able to find the .dll file in your project's folder, in the following subfolder path (once again replacing MyFirstPlugin with the name you gave your mod/project): MyFirstPlugin/bin/(Release or Debug)/netstandard2.1/MyFirstPlugin.dll

Simply copy & paste this .dll file into the BepInEx/plugins folder, in your game directory, and it should run the mod. We recommend keeping the default LogInfo statement in your Awake method that comes with the template. If you have this statement, you should see it appear in the console that opens when you run the game (after installing BepInEx, and enabling the console as per the first wiki article).

### Adding game assemblies

To actually use the game's methods and classes, you'll need to add the game's Assembly-CSharp.dll to your project's references. You can either do this manually by editing your .csproj file, or through a GUI your IDE provides. You will want to google how to do this for your specific IDE.

You will very likely also need the UnityEngine.dll, since this is required to use any of Unity's methods and classes.

The [template project](https://github.com/LethalCompany/LethalCompanyModdingWiki/tree/main/LethalCompanyPluginTemplate) has both of these set up, so you can copy that part of the .csproj file. You will need to edit the path to be correct, however.

The assemblies can be found in the Lethal Company_Data/Managed folder, in the game's directory.

## Next steps

## Publishing your mod

There are a number of options for releasing your mods:

### Mod websites
 - https://thunderstore.io/c/lethal-company/ <-- We recommend using Thunderstore, since it has a good mod manager (R2ModMan)
 - https://www.moddb.com/games/lethal-company
 - https://www.nexusmods.com

#### Using Thunderstore

 1. First, create an account. Once you've created your account, you'll need to set up a "Team". Do this by going to your account settings, which you can find at the top right of the window, over here:

 2. Then, go to the "Teams" tab, and click on "Create Team"

We recommend using your username as team name, unless you actually have a team and an agreed-upon name for it.

To upload a mod for Lethal Company, you'll first want to go to the [Lethal Company category](https://thunderstore.io/c/lethal-company/).

All you need to do here is press the "Upload" button, which you can find at the top left

A mod needs to be a specific format to be valid for the Thunderstore. This allows them to present your description, image, and other properties to the users.

The documentation on this format can be found [here](https://thunderstore.io/c/lethal-company/create/docs/).

For those who want a short explanation, however, you'll want to create a folder with the following:

 - icon.png (PNG icon for the mod, must be 256x256 resolution)
 - README.md (Readme in markdown syntax to be rendered on the package's page)
 - manifest.json (JSON file with the package's metadata)
 - Your mod file(s) itself (e.g. MyMod.dll)

Below is an example of a manifest:

`
{
    "name": "MoonOfTheDay",
    "version_number": "1.0.3",
    "website_url": "https://github.com/MaxWasUnavailable/MoonOfTheDay",
    "description": "This is a description for a mod. 250 characters max",
    "dependencies": [
        "LethalAPI-1.0.0"
    ]
}
`

Note that you can leave dependencies empty if your mod does not have any:

`
    "dependencies": []
`

Once you're done with all of this, happy with the way your README [will look](https://thunderstore.io/tools/markdown-preview/), and your manifest [is valid](https://thunderstore.io/tools/manifest-v1-validator/), you simply need to create a zip file and upload the mod!

Note that the zip file has to be created using the individual files, not the folder they're in. E.g. select all of the files listed above, and then create a zip.

### Updating on Thunderstore

To update a mod on the Thunderstore, you'll need to repeat the upload process. Make sure you have increased the version in your manifest.json file!